# -*- coding: utf-8 -*-
"""Working with Census Data in Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U6Cax8LnvZgqAUpRT0oeT-f0kTST9Kwx

## **Mapping the Census with Python**

By: Thomas Lillo

**3V61 Final Project**

Welcome to Google Colab Notebooks. If this is your first time viewing a notebook there are a few things you should know. All the code viewed below can be run by clicking the "play" button that appears when you hover over the "[      ]" part of the code section. If the code has output, it will appear below the code section. Some of the code is dependent on code higher up in the document, so it is important that the code sections are run in order. 

**Try running the code below.**
"""

print("hello world")

"""**The Data**

This notebook will teach you the basics of working with spatial data in Python, how to import and clean, and how to create useful visualizations. This tutorial uses a CSV and a SHP file, they are available to download from this Google Drive Folder:

https://drive.google.com/drive/folders/1dD6x38CQ3edL8Z_BkgAHvw_W7nqrJHR4?usp=sharing

**Getting Data From Google Drive**

You can use Google Drive to store the data that will be used in the notebook you create. To access this data you need to connect to your Google Drive by running the code below and following the steps. You will need to sign into the Google Account where you uploaded the files for this tutorial.
"""

from google.colab import drive
drive.mount('/content/drive/')

"""Once you've mounted your Google Drive, you'll be able to access files you've saved to it.

## **Working with CSV Data**

**Opening CSV Data**

First we need to open the CSV data we will be using in the tutorial and save it into an object. Before we can do this, we need to import the pandas library and numpy.
"""

import numpy as np
import pandas as pd

"""Now that you have pandas, were going to use it's read_csv function to bring in the data from Google Drive. The path to the data might be different in your Google Drive than the example below, depending on where you uploaded it."""

# the path to the data in your Google Drive
csvpath = "/content/drive/My Drive/CensusData/CensusData.csv"
# reading the csv from the drive and storing it into a variable
csvdata = pd.read_csv(csvpath)

"""We can view the top 5 rows of the data we stored in csvdata with the .head function in pandas. Getting the head() will allow you to see all the field names and the types of data within each field."""

csvdata.head()

"""First, were going to need to filter out all the rows that do not represent DAs. We can do this by selecting rows based on a condition. In this case we want to make sure the Geography Unique ID (GEO UID) field is at least 8 characters, anything less won't be a DA.

The DAs in this file are stored as int values, so the conditonal operation that we use will reflect this.
"""

# rename GEO UID to just UID to make it easier on myself
csvdata.rename(columns={'GEO UID':'UID'}, inplace=True)

# Every DA as a value will be at least 10000000
DAList = csvdata[csvdata.UID >= 1000000]

# get the head
DAList.head()

"""You can also use the describe() function to get basic stats about all the fields in the table, which is is useful for data validation. This will only assess and display colums containing  quantitative data."""

# describe the data
DAList.describe()

"""We won't need all of the colums for our analysis, we can select the colums were interested in using and save them into a new variable using the loc() function."""

# creating the selction of fields we want to store in the variable
data = DAList.loc[:,['UID','Province name','Population 2016','Population density per square kilometre',
                     'Median After Tax Income 2015','% of tenant hh spending 30% or more income on shelter',
                     '% with mortgage spending 30% or more of income shelter','Education - Postsecondary certificate, diploma or degree',
                     'Labour - Unemployment rate']]

# display the data we just stored
data.head()

"""Now we're going to visualize the data a bit with a popular 2D plotting library called **Matplotlib** and another called **Seaborn**. Within the matplotlib library were going to be using it's pyplot functions."""

import matplotlib.pyplot as plt
import seaborn as sns

"""The first thing were going to do is create a **histogram** of the median after tax income."""

# create figure and axis
fig, ax = plt.subplots()

# create the histogram
ax.hist(data['Median After Tax Income 2015'],bins=30,color='green')

# you can create titles and axis labels here
ax.set_title('Median After Tax Income 2015')
ax.set_xlabel('After Tax Income')
ax.set_ylabel('Count of DAs')

"""Now that we can see the distribution of income, lets plot income against population density to see if we find anything."""

# create the scatter plot with 
data.plot.scatter(x='Median After Tax Income 2015', y='Population density per square kilometre', title='Density Vs Income')

"""There are a few outliers within the data that we should remove. We'll perform another conditional selection to take out any DA with a population density above 100,000 per square kilometer."""

# anything below 100000
data2 = data[data['Population density per square kilometre'] <= 100000]

# Show the new counts to previous 56590 rows
data2.describe()

"""Now lets replot the same graph and see how it looks."""

# create the scatter plot with 
data2.plot.scatter(x='Median After Tax Income 2015', y='Population density per square kilometre', title='Density Vs Income')

"""Lets begin to compate just Alberta, Ontario, Quebec, and British Columbia. First we should create a new dataset with just the Provinces we're interested in."""

# create a new variable with only the 4 Provinces
data3 = data2[(data2['Province name'] == 'Ontario')| # in pandas the "|" symbol is used as a "or"
              (data2['Province name'] == 'British Columbia')|
              (data2['Province name'] == 'Alberta')|
              (data2['Province name'] == 'Quebec')]

# show us how many rows we have now
data3.describe()

"""Lets use color to seperate the Proviences in the next scatter plot. This is easy to do in the seaborn scatter plot."""

# create a scatter plot, set prov as the hue variable
sns.scatterplot(x='Median After Tax Income 2015', y='Population density per square kilometre', 
                hue='Province name', data=data3)

"""Seaborn has a huge library of very useful charts, that can be customized in may ways."""

# we can see how many DAs are in each Provience.
sns.countplot(data3['Province name'])

# We can create a boxplot of median after-tax income for each Province.
sns.boxplot('Province name', 'Median After Tax Income 2015', data=data3)

"""## **Working with Spatial Data**

We will now start working with spatial data in Python. Python is a useful tool for creating spatial visualizations and conducting spatial analysis of large data sets that programs like Excel wouldn't be able to handle.

**Importing Spatial Data**

We have to import the spatial data stored in the Google Drive. To do this, we need the GeoPandas library, unfortunatly this is not available in Google Colab, so we will have to use a workaround to install it.

The code below is a command line script that will install GeoPandas on your computer. You may need to have Python downloaded locally. If you do need Python, a download link can be found at the end of this notebook.

***This will take 5-7 minutes to run***
"""

# Commented out IPython magic to ensure Python compatibility.
# #@title Default title text
# # print the CPU and wall time for the entire cell
# %%time
# !apt update
# !apt upgrade
# !apt install gdal-bin python-gdal python3-gdal 
# # Install rtree - Geopandas requirment
# !apt install python3-rtree 
# # Install Geopandas
# !pip install git+git://github.com/geopandas/geopandas.git
# # Install descartes - Geopandas requirment
# !pip install descartes
# """
# You may need to install folium and its requirements too, if so remove the 
# hashtags in front of the lines of code below this comment and run the cell again.
# """
# # !pip install branca
# # !pip install jinja2
# # !pip install requests
# # !pip install folium

"""Now that geopandas is installed, you can import it and begin to work with spatial data. This is a similar process as with a csv, but we will use a geopandas function."""

import geopandas as gpd

# path to the shapefile in your Google Drive
spatialpath = '/content/drive/My Drive/CensusData/lda_000b16a_e.shp'
# geopandas read file function
spatialdata = gpd.read_file(spatialpath)

# view the head of the spatial file
spatialdata.head()

"""You can easily plot shp files with the matplotlib plot() function. We can map all the DAs in Canada very quickly."""

spatialdata.plot()

"""We can join the csv and the new spatial file to create maps. The spatial file has a lot of information that we will not need, we can create a new file in the same way we did with the csv."""

# just take the DA ID, Prov. ID, and the geometry
spdata = spatialdata.loc[:,['DAUID','PRUID','geometry']]

# make sure it worked
spdata.head()

"""We can also filter out the Provinces we don't need in the same way as we did with the CSV."""

# Prov Codes: ON = 35, QC = 24, AB = 48, BC = 59

# select based on the PRUID, they were stored as strings in the files
spdata2 = spdata[(spdata['PRUID'] == '24') |
                 (spdata['PRUID'] == '35') |
                 (spdata['PRUID'] == '48') |
                 (spdata['PRUID'] == '59')]

# plot the data to make sure we got what we want
spdata2.plot()

"""Now lets join the csv data to the spatial file."""

# rename the DAUID to just UID
spdata2.rename(columns={'DAUID':'UID'}, inplace=True)

# in data3 UID is a int, and in spdata2 its a string, so I have to change it
# to merge the two
data3['UID'] = data3['UID'].astype(str)

# merge data based on UID
alldata = spdata2.merge(data3,on='UID')

# show me the merge
alldata.head()

"""Now we have a complete set of data that we can work with."""

# check to make sure the data is all there still by plotting it
alldata.plot()

"""Now that we have our data joined to our spatial filem we can create some maps to show how the various geographies are different. Since DAs are small, we will just be mapping one Province at a time."""

# select just the BC DAs
bc = alldata[(alldata['PRUID'] == '59')]

# plot the BC DAs by unemployment rate
bc.plot(column='Labour - Unemployment rate')

"""You can add additional elements to the maps with more code."""

# set up the figure with matplotlib
fig, ax = plt.subplots(1,1)

# plot the same map but I added a label to the legend
bc.plot(column='Labour - Unemployment rate', ax=ax, legend=True, 
        legend_kwds={'label':'Unemployment Rate by DA','orientation':'vertical'})

"""Lets do one fro Alberta too, but with some different colors using the cmap option. More color options can be found here: https://matplotlib.org/tutorials/colors/colormaps.html"""

# create alberta
ab = alldata[alldata['PRUID'] == '48']

# set up the figure
fig, ax = plt.subplots(1,1)

# plot alberta unemployment
ab.plot(column='Labour - Unemployment rate', cmap='afmhot', ax=ax, legend=True)

# or just plot AB without any color in it.
ab.plot(color='white',edgecolor='black')
# this is useful for layering data

"""Next we're going to learn how to plot two layers in a single map. This is useful for showing point data over polygon data. Our data will not overlap, but this will show you how to plot two layers at the same time."""

# create the base layer
base = ab.plot(color='blue',edgecolor='red')

# plot the second layer
bc.plot(ax=base,color='green',edgecolor='black')

"""## **Bonus: Creating Web Maps**

You can create custom web maps without any existing data. This can be done in a Python package called Folium that takes advantage of the leaflet.js maps. Import folium to begin.
"""

import folium

"""Create a basic map with the coordinates in the middle and store it in a variable."""

map1 = folium.Map(location=[43.153509, -79.249545],
                  zoom_start=12)

"""Display the map by executing the variable where it is stored."""

map1

"""You can add a lat/long pop up when users click on the map with the LatLngPopup function. Click on the map to see the lat and long of the location."""

map1.add_child(folium.LatLngPopup())

"""You can easily save the maps that you create as html files, these can be opened with a web browser. When run outside of Google Colab, you are prompted with the option to save the map locally. In Google Colab it should appear in your files tab (where you mounted the drive)."""

# should be saved in the Google Drive files
map1.save('map1.html')

"""Open Street Map is the default map for folium, but there are other map styles that can be used: 

- Stamen Terrain
- Stamen Toner

And many more that can be found by googleing the package tiles.
"""

folium.Map(
    location=[40.753473, -73.983066],
    tiles='Stamen Toner',
    zoom_start=12)

"""The 'Stamen Terrain' tile can be used to display a 3D model of the landscape."""

folium.Map(
    location=[50.114730, -122.962598],
    tiles='Stamen Terrain',
    zoom_start=11)

"""**Adding Markers to Folium Maps**"""

# Drawing map2
map2 = folium.Map(location=[43.121295, -79.238422],
          zoom_start=14)

# Text to display when hovering over a marker
label = 'Click Here!'

# coordiantes can be entered in prior to creating the point
brock = [43.116933, -79.247413]

# Creating a point and adding it to map2
folium.Marker(brock,
             popup='<i>Brock University</i>',
             tooltip=label).add_to(map2)

# display map2
map2

"""Folium has a function that allows users to add new markers to the map. Click on the map to create a point!"""

map2.add_child(folium.ClickForMarker(popup='Cool Spot'))

# display map2
map2

"""Markers are customizable, their color and icon type can be changed depending on the need."""

# locations to mark
tt = [40.762729, -73.973861] # trump tower
ts = [40.758926, -73.984901] # time square
nmm = [40.743232, -73.987486] # national museum of mathamatics

# create the map
map3 = folium.Map(location=[40.753473, -73.983066],
                  tiles='Stamen Toner',
                  zoom_start=13)

# label for the header
l = 'Click'

# create the markers
folium.Marker(location=tt,
             popup='<i>Trump Tower</i>',
             icon=folium.Icon(color='red',icon='flag')).add_to(map3)

folium.Marker(location=ts,
             popup='<i>Time Square</i>',
             icon=folium.Icon(color='blue',icon='star')).add_to(map3)

folium.Marker(location=nmm,
             popup='<i>National Museum of Mathamatics</i>',
             icon=folium.Icon(color='green',icon='info-sign')).add_to(map3)

# draw the map
map3

"""You can also highlight areas of the map with circles!"""

# the centre of the circle
bp = [40.753099, -73.983109] # bryant park

# create the map
map4 = folium.Map(location=bp,
                 zoom_start=16)

# draw the circle
folium.Circle(radius=400,
              location=bp,
              popup='Bryant Park Area',
              color='#3186cc',
              fill=True,
             ).add_to(map4)

# draw the map
map4

"""Folium maps can be a useful addition to a interactive visualization or application.

## **Additional Information & Help**

**HOW TO INSTALL PYTHON & PACKAGES LOCALLY**

First, you need Python:

https://www.python.org/downloads/

Then you can install packages using the cmd:

https://packaging.python.org/tutorials/installing-packages/

**Learning Python Programming**

For those who learn best from text, Automate the Boring Stuff with Python is a very useful free resource available online. You will learn the basics of Python then how to immediatly apply your new skills.

https://automatetheboringstuff.com/

For audio/visual learners, there is a free course available from the University of Toronto on Coursera that provides a great introduction to programming in Python. 

https://www.coursera.org/learn/learn-to-program

**Pandas Documentation**

Documentation is Available Here: https://pandas.pydata.org/pandas-docs/stable/

**Seaborn Documentation**

To learn more about Seaborn and what you can do with it, or view the seaborn gallery. Visit the link below:

https://seaborn.pydata.org/

**GeoPandas Documentation**

For more infromation on how to use the GeoPandas package, all the information is available through this link.

GeoPandas Documentation: 
http://geopandas.org/index.html

**Folium Documentation**

For more infromation on how to use the folium package, all the information is available through this link.

Folium Documentation: 
https://python-visualization.github.io/folium/quickstart.html#Getting-Started
"""